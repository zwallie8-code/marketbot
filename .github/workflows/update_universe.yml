#!/usr/bin/env python3
import os
import time
import json
import requests

POLYGON_API_KEY = os.getenv("POLYGON_API_KEY")
STOCKS_FILE = "data/stocks.json"
PAGE_SIZE = 200  # Polygon max per request

def fetch_tickers():
    """Fetch the complete list of active stock tickers from Polygon."""
    tickers = []
    url = f"https://api.polygon.io/v3/reference/tickers?market=stocks&active=true&limit={PAGE_SIZE}&apiKey={POLYGON_API_KEY}"
    next_url = url

    while next_url:
        response = requests.get(next_url)
        if response.status_code == 429:
            print("‚ö†Ô∏è Hit Polygon rate limit. Sleeping for 12s...")
            time.sleep(12)
            continue

        if response.status_code != 200:
            print(f"‚ùå Failed to fetch tickers: {response.status_code} - {response.text}")
            break

        data = response.json()
        tickers.extend(data.get("results", []))
        next_url = data.get("next_url")
        if next_url:
            next_url += f"&apiKey={POLYGON_API_KEY}"

    print(f"‚úÖ Fetched {len(tickers)} tickers from Polygon")
    return tickers


def fetch_stock_price(symbol):
    """Fetch the latest close price for a given stock symbol from Polygon."""
    url = f"https://api.polygon.io/v2/aggs/ticker/{symbol}/prev?apiKey={POLYGON_API_KEY}"
    try:
        response = requests.get(url)
        if response.status_code == 429:
            print("‚ö†Ô∏è Rate limit hit. Sleeping 12s...")
            time.sleep(12)
            return fetch_stock_price(symbol)

        if response.status_code != 200:
            print(f"‚ö†Ô∏è Failed {symbol}: {response.status_code}")
            return None

        data = response.json()
        results = data.get("results", [])
        if not results:
            return None
        return results[0].get("c")  # Closing price
    except Exception as e:
        print(f"‚ö†Ô∏è Error fetching {symbol}: {e}")
        return None


def build_stock_list(limit=300):
    """Build stock universe with price + metadata."""
    tickers = fetch_tickers()
    stocks = []

    for i, t in enumerate(tickers[:limit], start=1):
        symbol = t.get("ticker")
        name = t.get("name", "Unknown")
        market = t.get("market", "stocks")

        price = fetch_stock_price(symbol)

        stocks.append({
            "symbol": symbol,
            "name": name,
            "market": market,
            "price": price if price else None,
            "marketCap": t.get("market_cap", None)
        })

        if i % 25 == 0:
            print(f"üì¶ Processed {i}/{limit} stocks")

    return stocks


def save_stocks(stocks):
    """Save stocks to JSON."""
    os.makedirs(os.path.dirname(STOCKS_FILE), exist_ok=True)
    with open(S
